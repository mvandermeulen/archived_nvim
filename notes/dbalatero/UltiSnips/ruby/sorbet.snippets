global !p

def camel_to_snake(name):
	if not name:
		return ""

	name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
	return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()

endglobal

snippet tsig "extends T::Sig"
extend T::Sig
endsnippet

snippet ty "# typed: true"
# typed: true

$0
endsnippet

snippet tyf "# typed: false"
# typed: false

$0
endsnippet

snippet sig "sig do params(param: Type).returns(Type) end"
sig do
	${1:params($2)}
		${3:.${4:returns(${5:type})}}
end
endsnippet

snippet part "param: Type(,)" i
${1:param}: ${2:type}${3:, }
endsnippet

snippet si "sig { cursor }"
sig { $1 }
endsnippet

snippet sigr "sig { params(params).returns(Type) }"
sig { ${1:params(${2:param}: ${3:type}).}returns(${4:type}) }
endsnippet

snippet sigv "sig { params(params).void }"
sig { ${1:params(${2:param}: ${3:type}).}void }
endsnippet

snippet params "class SomethingParams < T::Struct ... end"
class ${1:Something}Params < T::Struct
	$0
end
endsnippet

snippet enum "class MyEnum < T::Enum ... end"
class ${1:Something} < T::Enum
	enums do
		${2:EnumValue} = new('`!p snip.rv = t[2]`')
	end
end
endsnippet

snippet enumvalue "Value = new('Value')"
${1:EnumValue} = new('`!p snip.rv = t[1]`')
endsnippet

snippet const "const :name, Type, default: x"
const :${1:name}, ${2:Type}${3:, default:${4: value}}
endsnippet

snippet nil "T.nilable(Type)" i
T.nilable(${1:Type})
endsnippet

snippet ary "T::Array[Something]" i
T::Array[${1:Type}]
endsnippet

snippet hash "T::Hash[Something, Something]" i
T::Hash[${1:KeyType}, ${2:ValueType}]
endsnippet

snippet hashsym "T::Hash[Symbol, T.untyped]" i
T::Hash[Symbol, T.untyped]
endsnippet

snippet range "T::Range[Type]" i
T::Range[${1:Type}]
endsnippet

snippet tlet "T.let(val, Type)"
T.let(${1:value}, ${2: Type})
endsnippet

snippet tmust "T.must(val)"
T.must(${1:value})
endsnippet

snippet rets "returns(Type)" i
returns(${1:Type})
endsnippet
